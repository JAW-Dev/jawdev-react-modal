{"version":3,"sources":["../../src/providers/OptionsProvider.tsx","../../src/modules/cssObjectToStyledComponent.tsx","../../src/modules/parseObjectArgs.tsx","../../src/modules/getModalStyles.tsx","../../src/modules/modalFadeIn.tsx","../../src/modules/modalUpdate.tsx","../../src/modules/modalGetActionPayload.tsx","../../src/modules/modalFadeOut.tsx","../../src/modules/modalReducer.tsx","../../src/modules/modalKeepFocus.tsx","../../src/components/ModalWrap.tsx","../../src/modules/getModalWrapStyles.tsx","../../src/modules/modalCloseActions.tsx","../../src/components/ModalOverlay.tsx","../../src/components/ModalContent.tsx","../../src/components/ModalIcon.tsx","../../src/components/ModalIconSvg.tsx","../../src/components/ModalIconLabel.tsx","../../src/components/ModalClose.tsx","../../src/components/ModalElement.tsx","../../src/modules/modalCreateRoot.tsx","../../src/modules/modalFocusElement.tsx","../../src/components/ModalButton.tsx","../../src/modules/modalCloseFocus.tsx","../../src/modules/modalCloseEsc.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["OptionsContext","createContext","OptionsProvider","children","setOptions","Object","label","delay","closeOnOverlayClick","closeOnButtonClick","openOnLoad","showButton","showCloseButton","modalContent","value","useOptions","useContext","cssObjectToStyledComponent","object","key","match","subValue","parseObjectArgs","objKeys","i","overwrite","getModalStyles","custom","defaults","modalFadeIn","wrap","setTimeout","modalWrap","document","Number","modalUpdate","e","update","content","payload","action","actions","modalGetActionPayload","dispatch","type","modalConent","ACTIONS","setModalContent","modalFadeOut","SET_CONTENT","RESET_CONTENT","modalReducer","modalKeepFocus","contentElement","keyCode","focusableElements","firstFocusableElements","Array","lastFocusableElements","focusableElementsCount","handleBackwardTab","handleForwardTab","StyledModalWrap","props","className","modalWrapStyles","defaultStyles","position","top","right","bottom","left","zIndex","display","alignItems","justifyContent","opacity","transition","getModalWrapStyles","ModalWrap","options","React","overwriteStyles","delaySpeed","role","modalCloseActions","focus","backgroundColor","StyledModalOverlay","styled","ModalOverlay","focusElement","modalOverlayStyles","onClick","padding","StyledModalContent","ModalContent","modalContentStyles","cursor","StyledModalIcon","ModalIcon","modalIconStyles","fill","StyledModalIconSvg","ModalIconSvg","modalIconSvgStyles","svgprops","xmlns","viewBox","width","height","d","clip","overflow","StyledModalIconLabel","ModalIconLabel","modalIconLabelStyles","border","outline","StyledModalClose","ModalClose","modalCloseStyles","ModalElement","getBody","body","modalRoot","modalCreateRoot","useState","useEffect","setNewContent","previousFocusedElement","SetModalCloseImage","setModalCloseLabel","setSvgprops","createPortal","StyledModalButton","ModalButton","modalbuttonStyles","useReducer","updateContentOptions","state","updateContent","refocus","modalCloseFocus","mouseEvent","modalCloseEsc","StyledTestLabel","StyledTestInput","input","ComponentContent","defaultValue","stopPropagation","App","borderRadius","color","logo","link","name","pkg","code","table","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6f30a83e.chunk.js","sourcesContent":["// Import packages\nimport React, { createContext, useContext } from 'react';\n\n// Import modules\n\ninterface OptionsContextProps { [key: string]: any };\n\ninterface initOptionsProps {\n  options: object | undefined\n};\n\nexport const OptionsContext = createContext({} as OptionsContextProps);\n\nexport const OptionsProvider: React.FC<initOptionsProps> = ({ options, children }) => {\n  const defaults = {\n    label: 'Open',\n    delay: 300,\n    closeOnOverlayClick: true,\n    closeOnButtonClick: true,\n    openOnLoad: false,\n    showButton: true,\n    showCloseButton: true,\n    modalContent: ''\n  };\n\n  const setOptions: OptionsContextProps = Object.assign({}, defaults, options!);\n\n  return (\n    <OptionsContext.Provider value={setOptions!}>\n      {children}\n    </OptionsContext.Provider>\n  );\n};\n\nexport const useOptions = () => useContext(OptionsContext);\n","const cssObjectToStyledComponent = (object: object): string[] => {\n  const cssString: string[] = Object.entries(object).map(([key, value]): string => {\n    key = key.replace(/[A-Z]/g, match => `-${match.toLowerCase()}`);\n\n    if (typeof value === 'object') {\n      const subValue = cssObjectToStyledComponent(value);\n      return `${key} {${subValue}}`;\n    }\n\n    return `${key}: ${value};`;\n  });\n\n  return cssString;\n};\n\nexport default cssObjectToStyledComponent;\n","import './../interfaces';\n\nconst parseObjectArgs = (object: object, overwrite: object): object => {\n  if (overwrite) {\n    if (Object.keys(object).length > 0) {\n      const objKeys = Object.keys(object);\n\n      for (let i = 0; i < objKeys.length; i++) {\n        if (objKeys[i] in overwrite) {\n          object[objKeys[i]] = overwrite[objKeys[i]];\n        }\n      }\n\n      return object;\n    }\n    return overwrite;\n  }\n\n  return object;\n};\n\nexport default parseObjectArgs;\n","// Import modules\nimport parseObjectArgs from './parseObjectArgs';\n\nconst getModalStyles = (custom: object, defaults: object = {}): object => {\n  if (defaults) {\n    return parseObjectArgs(defaults, custom);\n  }\n\n  return custom;\n};\n\nexport default getModalStyles;\n","const modalFadeIn = (wrap: string, delay: string): void => {\n  setTimeout(() => {\n    const modalWrap = document.querySelector(wrap);\n\n    if (modalWrap) {\n      modalWrap.classList.add('modal-enter');\n    }\n  });\n\n  setTimeout(() => {\n    const modalWrap = document.querySelector(wrap);\n\n    if (modalWrap) {\n      modalWrap.classList.remove('modal-enter');\n      modalWrap.classList.add('modal-enter-active');\n    }\n  }, Number(delay));\n};\n\nexport default modalFadeIn;\n","// Import modules\nimport modalGetActionPayload from './modalGetActionPayload';\nimport modalFadeOut from './modalFadeOut';\nimport modalFadeIn from './modalFadeIn';\n\nimport './../interfaces';\n\nconst modalUpdate = (e: React.MouseEvent, content: any, { ACTIONS, state, dispatch, setModalContent, delay }: UpdateType) => {\n  e.stopPropagation();\n\n  const update: object | any = modalGetActionPayload(content, ACTIONS);\n  const wrap = '.modal__wrap';\n\n  dispatch({\n    type: update.action,\n    payload: { modalConent: update.payload }\n  });\n\n  if (update.action === ACTIONS.RESET_CONTENT) {\n    modalFadeOut(wrap, delay);\n    setTimeout(() => {\n      setModalContent(update.payload);\n      return state;\n    }, Number(delay));\n  } else {\n    setModalContent(update.payload);\n    modalFadeIn(wrap, delay);\n    return state;\n  }\n};\n\nexport default modalUpdate;\n","import './../interfaces';\n\nconst modalGetActionPayload = (content: any, actions: ActionType): object => {\n  let payload = '';\n  let action = '';\n\n  if (content) {\n    action = actions.SET_CONTENT;\n    payload = content;\n  } else {\n    action = actions.RESET_CONTENT;\n    payload = '';\n  }\n\n  return {\n    payload,\n    action\n  };\n};\n\nexport default modalGetActionPayload;\n","const modalFadeOut = (wrap: string, delay: number): void => {\n  const modalWrap = document.querySelector(wrap);\n\n  if (modalWrap) {\n    modalWrap.classList.remove('modal-enter-active');\n    modalWrap.classList.add('modal-exit');\n    modalWrap.classList.remove('modal-exit');\n    modalWrap.classList.add('modal-exit-active');\n\n    setTimeout(() => {\n      modalWrap.classList.remove('modal-exit-active');\n    }, Number(delay));\n  }\n};\n\nexport default modalFadeOut;\n","import './../interfaces';\n\nexport const ACTIONS = {\n  SET_CONTENT: 'set',\n  RESET_CONTENT: 'reset'\n};\n\nexport const modalReducer = (action: ActionParamType): string => {\n  switch (action.type) {\n    case ACTIONS.RESET_CONTENT:\n      return action.payload.modalConent;\n    case ACTIONS.SET_CONTENT:\n      return action.payload.modalConent;\n    default:\n      return '';\n  }\n};\n","const handleBackwardTab = (e: KeyboardEvent, firstFocusableElements: HTMLElement, lastFocusableElements: HTMLElement ) => {\n  if (document.activeElement === firstFocusableElements) {\n    e.preventDefault();\n    lastFocusableElements.focus();\n  }\n};\n\nconst handleForwardTab = (e: KeyboardEvent, firstFocusableElements: HTMLElement, lastFocusableElements: HTMLElement) => {\n  if (document.activeElement === lastFocusableElements) {\n    e.preventDefault();\n    firstFocusableElements.focus();\n  }\n};\n\nconst modalKeepFocus = () => {\n  document.addEventListener('keydown', (e: KeyboardEvent): void => {\n    const contentElement: HTMLElement | null = document.querySelector('.modal__content');\n\n    if (!contentElement) {\n      return;\n    }\n\n    const keyCode: string = e.code;\n    let focusableElements: NodeListOf<HTMLElement> = contentElement.querySelectorAll(\n      'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), [tabindex=\"0\"]'\n    );\n\n    focusableElements = Array.prototype.slice.call(focusableElements);\n\n    const firstFocusableElements: HTMLElement = focusableElements[0];\n    const lastFocusableElements: HTMLElement = focusableElements[focusableElements.length - 1];\n    const focusableElementsCount: number = focusableElements.length;\n\n    switch (keyCode) {\n      case 'Tab':\n        if (focusableElementsCount === 1) {\n          e.preventDefault();\n          break;\n        }\n\n        if (e.shiftKey) {\n          handleBackwardTab(e, firstFocusableElements, lastFocusableElements);\n        } else {\n          handleForwardTab(e, firstFocusableElements, lastFocusableElements);\n        }\n        break;\n      default:\n        break;\n    }\n  });\n};\n\nexport default modalKeepFocus;\n","// Import packages\nimport React from 'react';\nimport styled from 'styled-components';\n\n// Import modules\nimport cssObjectToStyledComponent from './../modules/cssObjectToStyledComponent';\nimport getModalWrapStyles from '../modules/getModalWrapStyles';\n\n// Import providers\nimport { useOptions } from './../providers/OptionsProvider';\n\n// Import interfaces\nimport './../interfaces';\n\nconst StyledModalWrap = styled.div.attrs(props => ({ className: props.className })) <StylesType>`\n  ${props => {\n    return cssObjectToStyledComponent(getModalWrapStyles(props.overwriteStyles, props.delaySpeed));\n  }}\n`;\n\nconst ModalWrap: React.FC<ElementPropsType> = ({ children }) => {\n  const options = useOptions();\n\n  const delay: number = options?.delay!;\n  const modalWrapStyles: object | any = options?.modalWrapStyles!;\n\n  return (\n    <div>\n      <StyledModalWrap className='modal__wrap' overwriteStyles={modalWrapStyles} delaySpeed={delay} role='dialog'>\n        {children}\n      </StyledModalWrap>\n    </div>\n  );\n};\n\nexport default ModalWrap;\n","// Import modules\nimport parseObjectArgs from './parseObjectArgs';\n\nconst getModalWrapStyles = (modalWrapStyles: object, delay: number): object => {\n  const defaultStyles = {\n    position: 'fixed',\n    top: '0',\n    right: '0',\n    bottom: '0',\n    left: '0',\n    zIndex: '10',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    opacity: '0',\n    transition: `opacity ${delay}ms linear`,\n    '&.modal-enter': {\n      opacity: '0'\n    },\n    '&.modal-enter-active': {\n      opacity: '1 !important'\n    },\n    '&.modal-exit': {\n      opacity: '1'\n    },\n    '&.modal-exit-active': {\n      opacity: '0'\n    }\n  };\n\n  return parseObjectArgs(defaultStyles, modalWrapStyles);\n};\n\nexport default getModalWrapStyles;\n","const modalCloseActions = (\n  action: (e: React.MouseEvent, content: any) => void,\n  focus: (focusElement: HTMLElement) => void,\n  e: React.MouseEvent,\n  focusElement: HTMLElement,\n  content: any\n): void => {\n  action(e, content);\n  focus(focusElement);\n};\n\nexport default modalCloseActions;\n","// Import packages\nimport React from 'react';\nimport styled from 'styled-components';\n\n// Import providers\nimport { useOptions } from './../providers/OptionsProvider';\n\n// Import modules\nimport modalCloseActions from '../modules/modalCloseActions';\nimport cssObjectToStyledComponent from './../modules/cssObjectToStyledComponent';\nimport getModalStyles from './../modules/getModalStyles';\n\n// Import interfaces\nimport './../interfaces';\n\nconst defaultStyles = {\n  position: 'fixed',\n  top: '0',\n  right: '0',\n  bottom: '0',\n  left: '0',\n  backgroundColor: 'rgba(0, 0, 0, 0.7)'\n};\n\nconst StyledModalOverlay = styled.div<StylesType>`${props => cssObjectToStyledComponent(getModalStyles(props.overwriteStyles, defaultStyles))}`;\n\nconst ModalOverlay: React.FC<ElementPropsType> = ({ focusElement }) => {\n  const options = useOptions();\n  const modalOverlayStyles: object | any = options?.modalOverlayStyles!;\n\n  const clickhandler = (e: React.MouseEvent): void => {\n    if (options.closeOnOverlayClick) {\n      modalCloseActions(options!.action, options!.focus, e, focusElement!, '');\n    }\n  };\n\n  return (\n    <StyledModalOverlay\n      className='modal__overlay'\n      overwriteStyles={modalOverlayStyles!}\n      onClick={clickhandler}\n    />\n  );\n};\n\nexport default ModalOverlay;\n","// Import packages\nimport React from 'react';\nimport styled from 'styled-components';\n\n// Import providers\nimport { useOptions } from './../providers/OptionsProvider';\n\n// Import modules\nimport cssObjectToStyledComponent from './../modules/cssObjectToStyledComponent';\nimport getModalStyles from './../modules/getModalStyles';\n\n// Import interfaces\nimport './../interfaces';\n\nconst defaultStyles = {\n  position: 'relative',\n  zIndex: '20',\n  padding: '2rem',\n  backgroundColor: 'white'\n};\n\nconst StyledModalContent = styled.div<StylesType>`${props => cssObjectToStyledComponent(getModalStyles(props.overwriteStyles, defaultStyles))}`;\n\nconst ModalContent: React.FC<ElementPropsType> = ({ children }) => {\n  const options = useOptions();\n  const modalContentStyles: object | any = options?.modalContentStyles!;\n\n  return (\n    <StyledModalContent\n      className='modal__content'\n      overwriteStyles={modalContentStyles!}\n    >\n      {children}\n    </StyledModalContent>\n  );\n};\n\nexport default ModalContent;\n","// Import packages\nimport React from 'react';\nimport styled from 'styled-components';\n\n// Import providers\nimport { useOptions } from './../providers/OptionsProvider';\n\n// Import modules\nimport cssObjectToStyledComponent from './../modules/cssObjectToStyledComponent';\nimport getModalStyles from './../modules/getModalStyles';\n\nconst defaultStyles = {\n  ':hover': {\n    cursor: 'pointer'\n  }\n};\n\nconst StyledModalIcon = styled.div<StylesType>`${props => cssObjectToStyledComponent(getModalStyles(props.overwriteStyles, defaultStyles))}`;\n\nconst ModalIcon = ({ children }) => {\n  const options = useOptions();\n  const modalIconStyles: object | any = options?.modalIconStyles!;\n\n  return (\n    <StyledModalIcon className='modal__icon' overwriteStyles={modalIconStyles!}>\n      {children}\n    </StyledModalIcon>\n  );\n};\n\nexport default ModalIcon;\n","// Import packages\nimport React from 'react';\nimport styled from 'styled-components';\n\n// Import modules\nimport cssObjectToStyledComponent from './../modules/cssObjectToStyledComponent';\nimport getModalStyles from './../modules/getModalStyles';\n\n// Import interfaces\nimport './../interfaces';\n\nconst defaultStyles = {\n  transition: 'fill 0.2s ease',\n  ':hover': {\n    fill: 'rgb(230, 230, 230)',\n    transition: 'fill 0.2s ease'\n  }\n};\n\nconst StyledModalIconSvg = styled.svg<StylesType>`${props => cssObjectToStyledComponent(getModalStyles(props.overwriteStyles, defaultStyles))}`;\n\nconst ModalIconSvg: React.FC<ElementPropsType> = ({ options }) => {\n  const modalIconSvgStyles: object | any = options?.modalIconSvgStyles!;\n  const svgprops: object | any = options?.svgprops!;\n\n  return (\n    <StyledModalIconSvg\n      xmlns='http://www.w3.org/2000/svg'\n      viewBox='0 0 512 512'\n      className='modal__icon-svg'\n      width='1.5em'\n      height='1.5em'\n      overwriteStyles={modalIconSvgStyles!}\n      {...svgprops}\n    >\n      <path d='M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm101.8-262.2L295.6 256l62.2 62.2c4.7 4.7 4.7 12.3 0 17l-22.6 22.6c-4.7 4.7-12.3 4.7-17 0L256 295.6l-62.2 62.2c-4.7 4.7-12.3 4.7-17 0l-22.6-22.6c-4.7-4.7-4.7-12.3 0-17l62.2-62.2-62.2-62.2c-4.7-4.7-4.7-12.3 0-17l22.6-22.6c4.7-4.7 12.3-4.7 17 0l62.2 62.2 62.2-62.2c4.7-4.7 12.3-4.7 17 0l22.6 22.6c4.7 4.7 4.7 12.3 0 17z' />\n    </StyledModalIconSvg>\n  );\n};\n\nexport default ModalIconSvg;\n","// Import packages\nimport React from 'react';\nimport styled from 'styled-components';\n\n// Import providers\nimport { useOptions } from './../providers/OptionsProvider';\n\n// Import modeuls\nimport cssObjectToStyledComponent from './../modules/cssObjectToStyledComponent';\nimport getModalStyles from './../modules/getModalStyles';\n\n// Import interfaces\nimport './../interfaces';\n\nconst defaultStyles = {\n  clip: 'rect(0 0 0 0)',\n  overflow: 'hidden',\n  position: 'absolute',\n  height: '1px',\n  width: '1px'\n};\n\nconst StyledModalIconLabel = styled.span<StylesType>`${props => cssObjectToStyledComponent(getModalStyles(props.overwriteStyles, defaultStyles))}`;\n\nconst ModalIconLabel: React.FC<ElementPropsType> = ({ children }) => {\n  const options = useOptions();\n  const modalIconLabelStyles: object | any = options?.modalIconLabelStyles!;\n\n  return (\n    <StyledModalIconLabel className='modal__icon-label' overwriteStyles={modalIconLabelStyles!}>\n      {children}\n    </StyledModalIconLabel>\n  );\n};\n\nexport default ModalIconLabel;\n","// Import packages\nimport React from 'react';\nimport styled from 'styled-components';\n\n// Import providers\nimport { useOptions } from './../providers/OptionsProvider';\n\n// Import modules\nimport getModalStyles from './../modules/getModalStyles';\nimport modalCloseActions from '../modules/modalCloseActions';\nimport cssObjectToStyledComponent from './../modules/cssObjectToStyledComponent';\n\n// Import interfaces\nimport './../interfaces';\n\nconst defaultStyles = {\n  position: 'absolute',\n  top: '0.25rem',\n  right: '0.25rem',\n  padding: '0',\n  backgroundColor: 'transparent',\n  border: 'none',\n  outline: 'none',\n  ':hover': {\n    cursor: 'pointer'\n  }\n};\n\nconst StyledModalClose = styled.button<StylesType>`${props => cssObjectToStyledComponent(getModalStyles(props.overwriteStyles, defaultStyles))}`;\n\nconst ModalClose: React.FC<ElementPropsType> = ({ children, focusElement }) => {\n  const options = useOptions();\n  const modalCloseStyles: object | any = options?.modalCloseStyles!;\n\n  const clickHandler = (e: React.MouseEvent): void => {\n    if (options.closeOnButtonClick) {\n      modalCloseActions(options!.action, options!.focus, e, focusElement!, '');\n    }\n  };\n\n  if (options.showCloseButton === false) {\n    return null;\n  }\n\n  return (\n    <StyledModalClose className='modal__close' overwriteStyles={modalCloseStyles!} onClick={clickHandler}>\n      {children}\n    </StyledModalClose>\n  );\n};\n\nexport default ModalClose;\n","// Import packages\nimport React, { useState, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\n\n// Import providers\nimport { useOptions } from './../providers/OptionsProvider';\n\n// Import modules\nimport modalCreateRoot from '../modules/modalCreateRoot';\nimport modalFocusElement from '../modules/modalFocusElement';\nimport modalKeepFocus from '../modules/modalKeepFocus';\nimport modalFadeIn from '../modules/modalFadeIn';\n\n// Import components\nimport ModalWrap from './ModalWrap';\nimport ModalOverlay from './ModalOverlay';\nimport ModalContent from './ModalContent';\nimport ModalIcon from './ModalIcon';\nimport ModalIconSvg from './ModalIconSvg';\nimport ModalIconLabel from './ModalIconLabel';\nimport ModalClose from './ModalClose';\n\n// Import interfaces\nimport './../interfaces';\n\nconst ModalElement: React.FC<ElementPropsType> = () => {\n  modalCreateRoot();\n\n  const options = useOptions();\n  const [newContent, setNewContent] = useState<string | null>(options.modalContent);\n\n  if (options.openOnLoad) {\n    useEffect(() => {\n      setNewContent(options.modalContent);\n    });\n    modalFadeIn('.modal__wrap', options.delay);\n  } else {\n    useEffect(() => {\n      setNewContent(options.modalContent);\n    }, [options.modalContent]);\n  }\n\n  if (!newContent) {\n    return null;\n  }\n\n  const previousFocusedElement = document.activeElement;\n  const SetModalCloseImage = options?.modalCloseImage || ModalIconSvg;\n  const setModalCloseLabel = options?.modalCloseLabel || 'Close';\n\n  const setSvgprops = {\n    options: options,\n    svgprops: options?.svgprops\n  };\n\n  modalFocusElement();\n  modalKeepFocus();\n\n  return createPortal(\n    <ModalWrap>\n      <ModalOverlay focusElement={previousFocusedElement} />\n      <ModalContent>\n        <ModalClose focusElement={previousFocusedElement}>\n          <ModalIcon>\n            <SetModalCloseImage {...setSvgprops} />\n            <ModalIconLabel>{setModalCloseLabel}</ModalIconLabel>\n          </ModalIcon>\n        </ModalClose>\n        {options.modalContent}\n      </ModalContent>\n    </ModalWrap>,\n    document.getElementById('modal-root')!\n  );\n};\n\nexport default ModalElement;\n","const modalCreateRoot = () => {\n  const getBody = document.getElementsByTagName('body');\n  const hasModalRoot = document.getElementById('modal-root');\n\n  if (hasModalRoot) {\n    return;\n  }\n\n  let body;\n\n  if (getBody.length > 0) {\n    body = getBody[0];\n  }\n\n  const modalRoot = document.createElement('DIV');\n\n  modalRoot.setAttribute('id', 'modal-root');\n  body.appendChild(modalRoot);\n};\n\nexport default modalCreateRoot;\n","const modalFocusElement = () => {\n  setTimeout((): void => {\n    const contentElement = document.querySelector('.modal__content');\n\n    if (!contentElement) {\n      return;\n    }\n\n    const selectors: string = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), [tabindex=\"0\"]';\n    let focusableElements: NodeListOf<HTMLElement> = contentElement.querySelectorAll(selectors);\n    focusableElements = Array.prototype.slice.call(focusableElements);\n    const firstFocusableElements: HTMLElement = focusableElements[0];\n    firstFocusableElements.focus();\n  });\n};\n\nexport default modalFocusElement;\n","// Import packages\nimport React, { useReducer, useState } from 'react';\nimport styled from 'styled-components';\n\n// Import providers\nimport { useOptions } from './../providers/OptionsProvider';\n\n// Import modules\nimport cssObjectToStyledComponent from '../modules/cssObjectToStyledComponent';\nimport getModalStyles from '../modules/getModalStyles';\nimport modalUpdate from './../modules/modalUpdate';\nimport { ACTIONS, modalReducer } from './../modules/modalReducer';\nimport modalCloseFocus from './../modules/modalCloseFocus';\nimport modalCloseEsc from './../modules/modalCloseEsc';\n\n// Import components\nimport ModalElement from './ModalElement';\n\n// Import interfaces\nimport '../interfaces';\n\nconst StyledModalButton = styled.button<StylesType>`\n  ${props => {\n    return cssObjectToStyledComponent(getModalStyles(props.overwriteStyles));\n  }}\n`;\n\nconst ModalButton: React.FC<ElementPropsType> = () => {\n  const options = useOptions();\n  const modalbuttonStyles: object | any = options?.modalbuttonStyles!;\n  const delay = options.delay;\n  const [state, dispatch] = useReducer<any | any>(modalReducer, '');\n  const [modalContent, setModalContent] = useState<string | ''>('');\n  const updateContentOptions: UpdateType = { ACTIONS, state, dispatch, setModalContent, delay };\n  const updateContent: (e: React.MouseEvent, content: any) => void = (e: React.MouseEvent, content: any) => modalUpdate(e, content, updateContentOptions);\n\n  options!.action = updateContent;\n  options.modalContent = options.openOnLoad ? options.content : modalContent;\n\n  const refocus = (focusElement: HTMLElement) => modalCloseFocus(focusElement);\n  options!.focus = refocus;\n\n  modalCloseEsc(updateContent, refocus, document.activeElement as HTMLElement);\n\n  if (options.showButton) {\n    return (\n      <StyledModalButton\n        className='modal__button'\n        overwriteStyles={modalbuttonStyles!}\n        onClick={(e: React.MouseEvent): void => updateContent(e, options.content)}\n      >\n        {options.label}\n        <ModalElement />\n      </StyledModalButton>\n    );\n  }\n\n  return <ModalElement />;\n};\n\nexport default ModalButton;\n","const modalCloseFocus = (focusElement: HTMLElement) => {\n  focusElement.focus();\n};\n\nexport default modalCloseFocus;\n","const modalCloseEsc = (updateContent: (mouseEvent: React.MouseEvent, content: any) => void, refocus: (focusElement: HTMLElement) => void, focusElement: HTMLElement) => {\n  document.addEventListener('keydown', (e: KeyboardEvent) => (mouseEvent: React.MouseEvent, content: any) => {\n    const keyCode = e.code;\n\n    if (keyCode === 'Escape') {\n      updateContent(mouseEvent, content);\n      refocus(focusElement);\n    }\n  });\n};\n\nexport default modalCloseEsc;\n","// Import packages\nimport React from 'react';\n\n// Import providers\nimport { OptionsProvider } from './providers/OptionsProvider';\n\n// Import components\nimport ModalButton from './components/ModalButton';\n\n// Import interfaces\nimport './interfaces';\n\nconst Modal: React.FC<IndexPropsType> = ({ children, options }) => {\n  options = options === undefined ? {} : options!;\n  options.content = options.content || children;\n\n  return (\n    <OptionsProvider options={options}>\n      <ModalButton />\n    </OptionsProvider>\n  );\n};\n\nexport default Modal;\n","// Import packages\nimport React from 'react'\nimport {\n  DMPBlurb,\n  DMPContent,\n  DMPExample,\n  DMPFooter,\n  DMPHeader,\n  DMPInstall,\n  DMPWrap,\n  DMPLogo,\n  DMPTable,\n  DMPGHLink,\n} from '@jaw-dev/react-demo-components';\nimport styled from 'styled-components';\n\n// Import package.json\nimport pkg from './../package.json';\n\n\n// Import components\nimport Modal from 'jawdev-react-modal'\n\nconst StyledTestLabel = styled.label`\n  display: block;\n  margin-bottom: 0.25rem;\n`;\n\nconst StyledTestInput = styled.input`\n  width: 300px;\n  padding: 0.25rem;\n`;\n\nconst ComponentContent = () => {\n  return (\n    <>\n      <h2>Example Modal</h2>\n      <p>\n        <StyledTestLabel>Name</StyledTestLabel>\n        <StyledTestInput type=\"text\" defaultValue='' />\n      </p>\n      <p>\n        <StyledTestLabel>Email</StyledTestLabel>\n        <StyledTestInput type=\"email\" defaultValue='' />\n      </p>\n      <p>\n        <button onClick={(e) => { e.stopPropagation() }}>Submit</button>\n      </p>\n    </>\n  )\n}\n\nconst optionsTable = `\n| Option              | Description                                                                                                            | Type    | default     |\n| ------------------- | ---------------------------------------------------------------------------------------------------------------------- | ------- | ----------- |\n| label               | The text in the main modal button                                                                                      | string  | 'Open'      |\n| delay               | By defaul the modal opens/closes with a fade in/out. The delay id how long the fade in/out takes                       | integer | 200         |\n| content             | You can use a string for the modal content instead of an React component                                               | string  | ''          |\n| svgprops            | By default the modal close icon is a SVG. This option will allow you to set the SVG attributes such as with and height | object  | {}          |\n| modalCloseImage     | Overwrite the default Close Icon image                                                                                 | string  | default svg |\n| modalCloseLabel     | Overwrite the default Close Label (hidden for accesiblility be default)                                                | string  | 'Close'     |\n| overlayCloseOnClick | Close the modal on overlay click                                                                                       | boolean | true        |\n| overlayCloseOnClick | Close the modal on overlay click                                                                                       | boolean | true        |\n| closeOnButtonClick  | Close the modal on close button click                                                                                  | boolean | true        |\n| openOnLoad          | Open the Modal on page load                                                                                            | boolean | false       |\n| showButton          | Show the modal open button                                                                                             | boolean | true        |\n| showCloseButton     | Show the modal close button                                                                                            | boolean | true        |\n`;\n\nconst example = `\n  import Modal from '@jaw-dev/react-modal';\n\n  const App = () => {\n    const yourOptions = {...}\n    const buttonStyles = {\n      backgroundColor: 'blue'\n    }\n\n    return (\n      <div>\n        <Modal options={yourOptions} modalbuttonStyles={buttonStyles}>\n          <YourComponent/>\n        </Modal>\n      </div>\n    );\n  }\n`;\n\nconst App = () => {\n  const buttonStyles = {\n    outline: 'none',\n    backgroundColor: 'rgb(230,230,230)',\n    border: '1px solid rgb(230,230,230)',\n    padding: '0.5rem',\n    borderRadius: '5px',\n    color: 'rgb(26,26,26)',\n    ':hover': {\n      cursor: 'pointer'\n    }\n  }\n\n  const options = {\n    label: 'Open Modal',\n    delay: 300,\n    closeOnOverlayClick: true,\n    closeOnButtonClick: true,\n    modalbuttonStyles: buttonStyles\n  }\n\n  return (\n    <DMPWrap>\n      <DMPHeader>\n        <DMPLogo logo=\"@JAW-Dev React Modal\" />\n        <DMPGHLink link='https://github.com/JAW-Dev/jawdev-react-modal' />\n      </DMPHeader>\n      <DMPContent>\n        <DMPBlurb>\n          <p>A simple React modal component</p>\n        </DMPBlurb>\n        <DMPInstall name={pkg.name} />\n        <DMPExample code={example} />\n        <DMPBlurb>\n          <Modal options={options}><ComponentContent /></Modal>\n        </DMPBlurb>\n        <DMPTable table={optionsTable} name={'Options'} />\n      </DMPContent>\n      <DMPFooter />\n    </DMPWrap>\n  );\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}