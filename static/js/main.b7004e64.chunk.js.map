{"version":3,"sources":["../../src/modules/modalGetActionPayload.tsx","../../src/modules/modalReducer.tsx","../../src/modules/cssObjectToStyledComponent.tsx","../../src/modules/parseObjectArgs.tsx","../../src/modules/getModalStyles.tsx","../../src/components/ModalWrap.tsx","../../src/modules/getModalWrapStyles.tsx","../../src/modules/modalCloseActions.tsx","../../src/components/ModalOverlay.tsx","../../src/components/ModalContent.tsx","../../src/components/ModalIcon.tsx","../../src/components/ModalIconSvg.tsx","../../src/components/ModalIconLabel.tsx","../../src/components/ModalClose.tsx","../../src/components/ModalElement.tsx","../../src/modules/modalCreateRoot.tsx","../../src/modules/modalFocusElement.tsx","../../src/modules/modalKeepFocus.tsx","../../src/index.tsx","../../src/modules/modalUpdate.tsx","../../src/modules/modalFadeOut.tsx","../../src/modules/modalFadeIn.tsx","../../src/modules/modalCloseFocus.tsx","../../src/modules/modalCloseEsc.tsx","App.tsx","index.tsx"],"names":["ACTIONS","SET_CONTENT","RESET_CONTENT","modalReducer","action","type","payload","modalConent","cssObjectToStyledComponent","object","Object","entries","map","key","value","replace","match","toLowerCase","parseObjectArgs","overwrite","keys","length","objKeys","i","getModalStyles","custom","defaults","StyledModalWrap","styled","div","attrs","className","props","position","top","right","bottom","left","zIndex","display","alignItems","justifyContent","opacity","transition","delaySpeed","&.modal-enter","&.modal-enter-active","&.modal-exit","&.modal-exit-active","overwriteStyles","ModalWrap","options","React","modalWrapStyles","delay","role","children","modalCloseActions","focus","e","focusElement","content","defaultStyles","backgroundColor","StyledModalOverlay","ModalOverlay","modalOverlayStyles","onClick","padding","StyledModalContent","ModalContent","modalContentStyles",":hover","cursor","StyledModalIcon","ModalIcon","modalIconStyles","fill","StyledModalIconSvg","svg","ModalIconSvg","xmlns","viewBox","width","height","modalIconSvgStyles","svgprops","d","clip","overflow","StyledModalIconLabel","span","ModalIconLabel","modalIconLabelStyles","border","outline","StyledModalClose","button","ModalClose","modalCloseStyles","ModalElement","getBody","document","getElementsByTagName","getElementById","body","modalRoot","createElement","setAttribute","appendChild","modalCreateRoot","useState","newContent","setNewContent","useEffect","previousFocusedElement","activeElement","SetModalCloseImage","modalCloseImage","setModalCloseLabel","modalCloseLabel","setSvgprops","setTimeout","contentElement","querySelector","focusableElements","querySelectorAll","Array","prototype","slice","call","addEventListener","keyCode","code","firstFocusableElements","lastFocusableElements","focusableElementsCount","preventDefault","shiftKey","createPortal","StyledModalButton","modalbuttonStyles","rootContent","rootOptions","label","useReducer","state","dispatch","modalContent","updateContentOptions","setModalContent","updateContent","stopPropagation","modalWrap","update","actions","wrap","classList","add","remove","Number","refocus","mouseEvent","StyledTestLabel","StyledTestInput","input","ComponentContent","defaultValue","App","logo","link","name","pkg","borderRadius","color","table","ReactDOM","render"],"mappings":"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","file":"static/js/main.b7004e64.chunk.js","sourcesContent":["import './../interfaces';\n\nconst modalGetActionPayload = (content: any, actions: ActionType): object => {\n  let payload = '';\n  let action = '';\n\n  if (content) {\n    action = actions.SET_CONTENT;\n    payload = content;\n  } else {\n    action = actions.RESET_CONTENT;\n    payload = '';\n  }\n\n  return {\n    payload,\n    action\n  };\n};\n\nexport default modalGetActionPayload;\n","import './../interfaces';\n\nexport const ACTIONS = {\n  SET_CONTENT: 'set',\n  RESET_CONTENT: 'reset'\n};\n\nexport const modalReducer = (action: ActionParamType): string => {\n  switch (action.type) {\n    case ACTIONS.RESET_CONTENT:\n      return action.payload.modalConent;\n    case ACTIONS.SET_CONTENT:\n      return action.payload.modalConent;\n    default:\n      return '';\n  }\n};\n","const cssObjectToStyledComponent = (object: object): string[] => {\n  const cssString: string[] = Object.entries(object).map(([key, value]): string => {\n    key = key.replace(/[A-Z]/g, match => `-${match.toLowerCase()}`);\n\n    if (typeof value === 'object') {\n      const subValue = cssObjectToStyledComponent(value);\n      return `${key} {${subValue}}`;\n    }\n\n    return `${key}: ${value};`;\n  });\n\n  return cssString;\n};\n\nexport default cssObjectToStyledComponent;\n","import './../interfaces';\n\nconst parseObjectArgs = (object: object, overwrite: object): object => {\n  if (overwrite) {\n    if (Object.keys(object).length > 0) {\n      const objKeys = Object.keys(object);\n\n      for (let i = 0; i < objKeys.length; i++) {\n        if (objKeys[i] in overwrite) {\n          object[objKeys[i]] = overwrite[objKeys[i]];\n        }\n      }\n\n      return object;\n    }\n    return overwrite;\n  }\n\n  return object;\n};\n\nexport default parseObjectArgs;\n","// Import modules\nimport parseObjectArgs from './parseObjectArgs';\n\nconst getModalStyles = (custom: object, defaults: object = {}): object => {\n  if (defaults) {\n    return parseObjectArgs(defaults, custom);\n  }\n\n  return custom;\n};\n\nexport default getModalStyles;\n","// Import packages\nimport React from 'react';\nimport styled from 'styled-components';\n\n// Import modules\nimport cssObjectToStyledComponent from './../modules/cssObjectToStyledComponent';\nimport getModalWrapStyles from '../modules/getModalWrapStyles';\n\n// Import interfaces\nimport './../interfaces';\n\nconst StyledModalWrap = styled.div.attrs(props => ({ className: props.className }))<StylesType>`\n  ${props => {\n    return cssObjectToStyledComponent(getModalWrapStyles(props.overwriteStyles, props.delaySpeed));\n  }}\n`;\n\nconst ModalWrap: React.FC<ElementPropsType> = ({ children, options }) => {\n  const delay: number = options?.delay!;\n  const modalWrapStyles: object | any = options?.modalWrapStyles!;\n\n  return (\n    <div>\n      <StyledModalWrap className='modal__wrap' overwriteStyles={modalWrapStyles} delaySpeed={delay} role='dialog'>\n        {children}\n      </StyledModalWrap>\n    </div>\n  );\n};\n\nexport default ModalWrap;\n","// Import modules\nimport parseObjectArgs from './parseObjectArgs';\n\nconst getModalWrapStyles = (modalWrapStyles: object, delay: number): object => {\n  const defaultStyles = {\n    position: 'fixed',\n    top: '0',\n    right: '0',\n    bottom: '0',\n    left: '0',\n    zIndex: '10',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    opacity: '0',\n    transition: `opacity ${delay}ms linear`,\n    '&.modal-enter': {\n      opacity: '0'\n    },\n    '&.modal-enter-active': {\n      opacity: '1 !important'\n    },\n    '&.modal-exit': {\n      opacity: '1'\n    },\n    '&.modal-exit-active': {\n      opacity: '0'\n    }\n  };\n\n  return parseObjectArgs(defaultStyles, modalWrapStyles);\n};\n\nexport default getModalWrapStyles;\n","const modalCloseActions = (\n  action: (e: React.MouseEvent, content: any) => void,\n  focus: (focusElement: HTMLElement) => void,\n  e: React.MouseEvent,\n  focusElement: HTMLElement,\n  content: any\n): void => {\n  action(e, content);\n  focus(focusElement);\n};\n\nexport default modalCloseActions;\n","// Import packages\nimport React from 'react';\nimport styled from 'styled-components';\n\n// Import modules\nimport modalCloseActions from '../modules/modalCloseActions';\nimport cssObjectToStyledComponent from './../modules/cssObjectToStyledComponent';\nimport getModalStyles from './../modules/getModalStyles';\n\n// Import interfaces\nimport './../interfaces';\n\nconst defaultStyles = {\n  position: 'fixed',\n  top: '0',\n  right: '0',\n  bottom: '0',\n  left: '0',\n  backgroundColor: 'rgba(0, 0, 0, 0.7)'\n};\n\nconst StyledModalOverlay = styled.div<StylesType>`${props => cssObjectToStyledComponent(getModalStyles(props.overwriteStyles, defaultStyles))}`;\n\nconst ModalOverlay: React.FC<ElementPropsType> = ({ action, focus, focusElement, options }) => {\n  const modalOverlayStyles: object | any = options?.modalOverlayStyles!;\n  const content: any = options?.content!;\n\n  return (\n    <StyledModalOverlay\n      className='modal__overlay'\n      overwriteStyles={modalOverlayStyles!}\n      onClick={(e: React.MouseEvent): void => modalCloseActions(action, focus, e, focusElement!, content)}\n    />\n  );\n};\n\nexport default ModalOverlay;\n","// Import packages\nimport React from 'react';\nimport styled from 'styled-components';\n\n// Import modules\nimport cssObjectToStyledComponent from './../modules/cssObjectToStyledComponent';\nimport getModalStyles from './../modules/getModalStyles';\n\n// Import interfaces\nimport './../interfaces';\n\nconst defaultStyles = {\n  position: 'relative',\n  zIndex: '20',\n  padding: '2rem',\n  backgroundColor: 'white'\n};\n\nconst StyledModalContent = styled.div<StylesType>`${props => cssObjectToStyledComponent(getModalStyles(props.overwriteStyles, defaultStyles))}`;\n\nconst ModalContent: React.FC<ElementPropsType> = ({ children, options }) => {\n  const modalContentStyles: object | any = options?.modalContentStyles!;\n\n  return (\n    <StyledModalContent\n      className='modal__content'\n      overwriteStyles={modalContentStyles!}\n    >\n      {children}\n    </StyledModalContent>\n  );\n};\n\nexport default ModalContent;\n","// Import packages\nimport React from 'react';\nimport styled from 'styled-components';\n\n// Import modules\nimport cssObjectToStyledComponent from './../modules/cssObjectToStyledComponent';\nimport getModalStyles from './../modules/getModalStyles';\n\nconst defaultStyles = {\n  ':hover': {\n    cursor: 'pointer'\n  }\n};\n\nconst StyledModalIcon = styled.div<StylesType>`${props => cssObjectToStyledComponent(getModalStyles(props.overwriteStyles, defaultStyles))}`;\n\nconst ModalIcon = ({ children, options }) => {\n  const modalIconStyles: object | any = options?.modalIconStyles!;\n\n  return (\n    <StyledModalIcon className='modal__icon' overwriteStyles={modalIconStyles!}>\n      {children}\n    </StyledModalIcon>\n  );\n};\n\nexport default ModalIcon;\n","// Import packages\nimport React from 'react';\nimport styled from 'styled-components';\n\n// Import modules\nimport cssObjectToStyledComponent from './../modules/cssObjectToStyledComponent';\nimport getModalStyles from './../modules/getModalStyles';\n\n// Import interfaces\nimport './../interfaces';\n\nconst defaultStyles = {\n  transition: 'fill 0.2s ease',\n  ':hover': {\n    fill: 'rgb(230, 230, 230)',\n    transition: 'fill 0.2s ease'\n  }\n};\n\nconst StyledModalIconSvg = styled.svg<StylesType>`${props => cssObjectToStyledComponent(getModalStyles(props.overwriteStyles, defaultStyles))}`;\n\nconst ModalIconSvg: React.FC<ElementPropsType> = ({ options }) => {\n  const modalIconSvgStyles: object | any = options?.modalIconSvgStyles!;\n  const svgprops: object | any = options?.svgprops!;\n\n  return (\n    <StyledModalIconSvg\n      xmlns='http://www.w3.org/2000/svg'\n      viewBox='0 0 512 512'\n      className='modal__icon-svg'\n      width='1.5em'\n      height='1.5em'\n      overwriteStyles={modalIconSvgStyles!}\n      {...svgprops}\n    >\n      <path d='M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm101.8-262.2L295.6 256l62.2 62.2c4.7 4.7 4.7 12.3 0 17l-22.6 22.6c-4.7 4.7-12.3 4.7-17 0L256 295.6l-62.2 62.2c-4.7 4.7-12.3 4.7-17 0l-22.6-22.6c-4.7-4.7-4.7-12.3 0-17l62.2-62.2-62.2-62.2c-4.7-4.7-4.7-12.3 0-17l22.6-22.6c4.7-4.7 12.3-4.7 17 0l62.2 62.2 62.2-62.2c4.7-4.7 12.3-4.7 17 0l22.6 22.6c4.7 4.7 4.7 12.3 0 17z' />\n    </StyledModalIconSvg>\n  );\n};\n\nexport default ModalIconSvg;\n","// Import packages\nimport React from 'react';\nimport styled from 'styled-components';\n\n// Import modeuls\nimport cssObjectToStyledComponent from './../modules/cssObjectToStyledComponent';\nimport getModalStyles from './../modules/getModalStyles';\n\n// Import interfaces\nimport './../interfaces';\n\nconst defaultStyles = {\n  clip: 'rect(0 0 0 0)',\n  overflow: 'hidden',\n  position: 'absolute',\n  height: '1px',\n  width: '1px'\n};\n\nconst StyledModalIconLabel = styled.span<StylesType>`${props => cssObjectToStyledComponent(getModalStyles(props.overwriteStyles, defaultStyles))}`;\n\nconst ModalIconLabel: React.FC<ElementPropsType> = ({ children, options }) => {\n  const modalIconLabelStyles: object | any = options?.modalIconLabelStyles!;\n\n  return (\n    <StyledModalIconLabel className='modal__icon-label' overwriteStyles={modalIconLabelStyles!}>\n      {children}\n    </StyledModalIconLabel>\n  );\n};\n\nexport default ModalIconLabel;\n","// Import packages\nimport React from 'react';\nimport styled from 'styled-components';\n\n// Import modules\nimport getModalStyles from './../modules/getModalStyles';\nimport modalCloseActions from '../modules/modalCloseActions';\nimport cssObjectToStyledComponent from './../modules/cssObjectToStyledComponent';\n\n// Import interfaces\nimport './../interfaces';\n\nconst defaultStyles = {\n  position: 'absolute',\n  top: '0.25rem',\n  right: '0.25rem',\n  padding: '0',\n  backgroundColor: 'transparent',\n  border: 'none',\n  outline: 'none',\n  ':hover': {\n    cursor: 'pointer'\n  }\n};\n\nconst StyledModalClose = styled.button<StylesType>`${props => cssObjectToStyledComponent(getModalStyles(props.overwriteStyles, defaultStyles))}`;\n\nconst ModalClose: React.FC<ElementPropsType> = ({ children, content, action, focus, focusElement, options }) => {\n  const modalCloseStyles: object | any = options?.modalCloseStyles!;\n\n  return (\n    <StyledModalClose\n      className='modal__close'\n      overwriteStyles={modalCloseStyles!}\n      onClick={(e: React.MouseEvent): void => modalCloseActions(action, focus, e, focusElement!, content)}\n    >\n      {children}\n    </StyledModalClose>\n  );\n};\n\nexport default ModalClose;\n","// Import packages\nimport React, { useState, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\n\n// Import modules\nimport modalCreateRoot from '../modules/modalCreateRoot';\nimport modalFocusElement from '../modules/modalFocusElement';\nimport modalKeepFocus from '../modules/modalKeepFocus';\n\n// Import components\nimport ModalWrap from './ModalWrap';\nimport ModalOverlay from './ModalOverlay';\nimport ModalContent from './ModalContent';\nimport ModalIcon from './ModalIcon';\nimport ModalIconSvg from './ModalIconSvg';\nimport ModalIconLabel from './ModalIconLabel';\nimport ModalClose from './ModalClose';\n\n// Import interfaces\nimport './../interfaces';\n\nconst ModalElement: React.FC<ElementPropsType> = ({ content, action, focus, options }) => {\n  modalCreateRoot();\n\n  const [newContent, setNewContent] = useState<string | null>('');\n\n  useEffect(() => {\n    setNewContent(content);\n  }, [content]);\n\n  if (!newContent) {\n    return null;\n  }\n\n  const previousFocusedElement = document.activeElement;\n  const SetModalCloseImage = options?.modalCloseImage || ModalIconSvg;\n  const setModalCloseLabel = options?.modalCloseLabel || 'Close';\n\n  const setSvgprops = {\n    options: options,\n    svgprops: options?.svgprops\n  };\n\n  modalFocusElement();\n  modalKeepFocus();\n\n  return createPortal(\n    <ModalWrap options={options}>\n      <ModalOverlay action={action} focus={focus} focusElement={previousFocusedElement} options={options} />\n      <ModalContent options={options}>\n        <ModalClose action={action} focus={focus} focusElement={previousFocusedElement} options={options}>\n          <ModalIcon options={options}>\n            <SetModalCloseImage {...setSvgprops} />\n            <ModalIconLabel options={options}>{setModalCloseLabel}</ModalIconLabel>\n          </ModalIcon>\n        </ModalClose>\n        {content}\n      </ModalContent>\n    </ModalWrap>,\n    document.getElementById('modal-root')!\n  );\n};\n\nexport default ModalElement;\n","const modalCreateRoot = () => {\n  const getBody = document.getElementsByTagName('body');\n  const hasModalRoot = document.getElementById('modal-root');\n\n  if (hasModalRoot) {\n    return;\n  }\n\n  let body;\n\n  if (getBody.length > 0) {\n    body = getBody[0];\n  }\n\n  const modalRoot = document.createElement('DIV');\n\n  modalRoot.setAttribute('id', 'modal-root');\n  body.appendChild(modalRoot);\n};\n\nexport default modalCreateRoot;\n","const modalFocusElement = () => {\n  setTimeout((): void => {\n    const contentElement = document.querySelector('.modal__content');\n\n    if (!contentElement) {\n      return;\n    }\n\n    const selectors: string = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), [tabindex=\"0\"]';\n    let focusableElements: NodeListOf<HTMLElement> = contentElement.querySelectorAll(selectors);\n    focusableElements = Array.prototype.slice.call(focusableElements);\n    const firstFocusableElements: HTMLElement = focusableElements[0];\n    firstFocusableElements.focus();\n  });\n};\n\nexport default modalFocusElement;\n","const handleBackwardTab = (e: KeyboardEvent, firstFocusableElements: HTMLElement, lastFocusableElements: HTMLElement ) => {\n  if (document.activeElement === firstFocusableElements) {\n    e.preventDefault();\n    lastFocusableElements.focus();\n  }\n};\n\nconst handleForwardTab = (e: KeyboardEvent, firstFocusableElements: HTMLElement, lastFocusableElements: HTMLElement) => {\n  if (document.activeElement === lastFocusableElements) {\n    e.preventDefault();\n    firstFocusableElements.focus();\n  }\n};\n\nconst modalKeepFocus = () => {\n  document.addEventListener('keydown', (e: KeyboardEvent): void => {\n    const contentElement: HTMLElement | null = document.querySelector('.modal__content');\n\n    if (!contentElement) {\n      return;\n    }\n\n    const keyCode: string = e.code;\n    let focusableElements: NodeListOf<HTMLElement> = contentElement.querySelectorAll(\n      'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), [tabindex=\"0\"]'\n    );\n\n    focusableElements = Array.prototype.slice.call(focusableElements);\n\n    const firstFocusableElements: HTMLElement = focusableElements[0];\n    const lastFocusableElements: HTMLElement = focusableElements[focusableElements.length - 1];\n    const focusableElementsCount: number = focusableElements.length;\n\n    switch (keyCode) {\n      case 'Tab':\n        if (focusableElementsCount === 1) {\n          e.preventDefault();\n          break;\n        }\n\n        if (e.shiftKey) {\n          handleBackwardTab(e, firstFocusableElements, lastFocusableElements);\n        } else {\n          handleForwardTab(e, firstFocusableElements, lastFocusableElements);\n        }\n        break;\n      default:\n        break;\n    }\n  });\n};\n\nexport default modalKeepFocus;\n","// Import packages\nimport React, { useReducer, useState } from 'react';\nimport styled from 'styled-components';\n\n// Import modules\nimport modalUpdate from './modules/modalUpdate';\nimport { ACTIONS, modalReducer } from './modules/modalReducer';\nimport modalCloseFocus from './modules/modalCloseFocus';\nimport modalCloseEsc from './modules/modalCloseEsc';\nimport cssObjectToStyledComponent from './modules/cssObjectToStyledComponent';\nimport getModalStyles from './modules/getModalStyles';\n\n// Import components\nimport ModalElement from './components/ModalElement';\n\n// Import interfaces\nimport './interfaces';\n\nconst StyledModalButton = styled.button<StylesType>`\n  ${props => {\n    return cssObjectToStyledComponent(getModalStyles(props.overwriteStyles));\n  }}\n`;\n\nconst Modal: React.FC<IndexPropsType> = ({ content, modalbuttonStyles, children, options }) => {\n  // Setup the options\n  const rootContent: any = content || children;\n  const rootOptions: OptionsType = options!;\n  const delayDefault: number = 300;\n\n  // Get the Modal delay\n  const delay: string = rootOptions.delay || delayDefault;\n\n  if (!options?.delay) {\n    options!.delay = delayDefault;\n  }\n\n  // Get the button label\n  const label: string = rootOptions.label || 'Open';\n\n  // Update the content\n  const [state, dispatch] = useReducer<any | any>(modalReducer, '');\n  const [modalContent, setModalContent] = useState<string | ''>('');\n  const updateContentOptions: UpdateType = { ACTIONS, state, dispatch, setModalContent, delay };\n  const updateContent: (e: React.MouseEvent, content: any) => void = (e: React.MouseEvent, content: any) => modalUpdate(e, content, updateContentOptions);\n\n  const refocus = (focusElement: HTMLElement) => modalCloseFocus(focusElement);\n\n  modalCloseEsc(updateContent, refocus, document.activeElement as HTMLElement);\n\n  return (\n    <StyledModalButton\n      className='modal__button'\n      overwriteStyles={modalbuttonStyles!}\n      onClick={(e: React.MouseEvent): void => updateContent(e, rootContent)}\n    >\n      {label}\n      <ModalElement content={modalContent} action={updateContent} focus={refocus} options={options} />\n    </StyledModalButton>\n  );\n};\n\nexport default Modal;\n","// Import modules\nimport modalGetActionPayload from './modalGetActionPayload';\nimport modalFadeOut from './modalFadeOut';\nimport modalFadeIn from './modalFadeIn';\n\nimport './../interfaces';\n\nconst modalUpdate = (e: React.MouseEvent, content: any, { ACTIONS, state, dispatch, setModalContent, delay }: UpdateType) => {\n  e.stopPropagation();\n\n  const update: object | any = modalGetActionPayload(content, ACTIONS);\n  const wrap = '.modal__wrap';\n\n  dispatch({\n    type: update.action,\n    payload: { modalConent: update.payload }\n  });\n\n  if (update.action === ACTIONS.RESET_CONTENT) {\n    modalFadeOut(wrap);\n    setTimeout(() => {\n      setModalContent(update.payload);\n      return state;\n    }, Number(delay));\n  } else {\n    setModalContent(update.payload);\n    modalFadeIn(wrap, delay);\n    return state;\n  }\n};\n\nexport default modalUpdate;\n","const modalFadeOut = (wrap: string): void => {\n  const modalWrap = document.querySelector(wrap);\n\n  if (modalWrap) {\n    modalWrap.classList.remove('modal-enter-active');\n    modalWrap.classList.add('modal-exit');\n    modalWrap.classList.remove('modal-exit');\n    modalWrap.classList.add('modal-exit-active');\n  }\n};\n\nexport default modalFadeOut;\n","const modalFadeIn = (wrap: string, delay: string): void => {\n  setTimeout(() => {\n    const modalWrap = document.querySelector(wrap);\n\n    if (modalWrap) {\n      modalWrap.classList.add('modal-enter');\n    }\n  });\n\n  setTimeout(() => {\n    const modalWrap = document.querySelector(wrap);\n\n    if (modalWrap) {\n      modalWrap.classList.remove('modal-enter');\n      modalWrap.classList.add('modal-enter-active');\n    }\n  }, Number(delay));\n};\n\nexport default modalFadeIn;\n","const modalCloseFocus = (focusElement: HTMLElement) => {\n  focusElement.focus();\n};\n\nexport default modalCloseFocus;\n","const modalCloseEsc = (updateContent: (mouseEvent: React.MouseEvent, content: any) => void, refocus: (focusElement: HTMLElement) => void, focusElement: HTMLElement) => {\n  document.addEventListener('keydown', (e: KeyboardEvent) => (mouseEvent: React.MouseEvent, content: any) => {\n    const keyCode = e.code;\n\n    if (keyCode === 'Escape') {\n      updateContent(mouseEvent, content);\n      refocus(focusElement);\n    }\n  });\n};\n\nexport default modalCloseEsc;\n","// Import packages\nimport React from 'react'\nimport {\n  DMPBlurb,\n  DMPContent,\n  DMPExample,\n  DMPFooter,\n  DMPHeader,\n  DMPInstall,\n  DMPWrap,\n  DMPLogo,\n  DMPTable,\n  DMPGHLink,\n} from '@jaw-dev/react-demo-components';\nimport styled from 'styled-components';\n\n// Import package.json\nimport pkg from './../package.json';\n\n\n// Import components\nimport Modal from 'jawdev-react-modal'\n\nconst StyledTestLabel = styled.label`\n  display: block;\n  margin-bottom: 0.25rem;\n`;\n\nconst StyledTestInput = styled.input`\n  width: 300px;\n  padding: 0.25rem;\n`;\n\nconst ComponentContent = () => {\n  return (\n    <>\n      <h2>Example Modal</h2>\n      <p>\n        <StyledTestLabel>Name</StyledTestLabel>\n        <StyledTestInput type=\"text\" defaultValue='' />\n      </p>\n      <p>\n        <StyledTestLabel>Email</StyledTestLabel>\n        <StyledTestInput type=\"email\" defaultValue='' />\n      </p>\n      <p>\n        <button onClick={(e) => { e.stopPropagation() }}>Submit</button>\n      </p>\n    </>\n  )\n}\n\nconst props = `\n| Prop Name         | Description                                                              | Type   | default |\n| ----------------- | ------------------------------------------------------------------------ | ------ | ------- |\n| content           | You can use a string for the modal content instead of an React component | string | ''      |\n| modalbuttonStyles | Overwrite the default button styles                                      | object | {}      |\n| options           | The modal options                                                        | object | {}      |\n`;\n\nconst optionsTable = `\n| Option                 | Description                                                                                                            | Type    | default     |\n| ---------------------- | ---------------------------------------------------------------------------------------------------------------------- | ------- | ----------- |\n| label                  | The text in the main modal button                                                                                      | string  | 'Open'      |\n| content                | Use a string for the modal content. This is can be used in place of the 'content' prop                                 | string  | ''          |\n| delay                  | By defaul the modal opens/closes with a fade in/out. The delay id how long the fade in/out takes                       | integer | 200         |\n| svgprops               | By default the modal close icon is a SVG. This option will allow you to set the SVG attributes such as with and height | object  | {}          |\n| modalCloseImage        | Overwrite the default Close Icon image                                                                                 | string  | default svg |\n| modalCloseLabel        | Overwrite the default Close Label (hidden for accesiblility be default)                                                | string  | 'Close'     |\n| modalCloseStyles       | Overwrite the default CSS for the Close Icon and Label wrapper*                                                       | object  | {}          |\n| modalContentStyles     | Overwrite the default CSS for the Content element*                                                                    | object  | {}          |\n| modalEnterActiveStyles | Overwrite the default CSS for the styles used in opening the modal*                                                   | object  | {}          |\n| modalEnterStyles       | Overwrite the default CSS for the styles used in opening the modal*                                                   | object  | {}          |\n| modalExitActiveStyles  | Overwrite the default CSS for the styles used in closing the modal*                                                   | object  | {}          |\n| modalExitStyles        | Overwrite the default CSS for the styles used in closing the modal*                                                   | object  | {}          |\n| modalIconLabelStyles   | Overwrite the default CSS for the Close Icon Label*                                                                   | object  | {}          |\n| modalIconStyles        | Overwrite the default CSS for the Close Icon*                                                                         | object  | {}          |\n| modalIconSvgStyles     | Overwrite the default CSS for the default Close Icon SVG*                                                             | object  | {}          |\n| modalOverlayStyles     | Overwrite the default CSS for the Overlay*                                                                            | object  | {}          |\n| modalWrapStyles        | Overwrite the default CSS for the Modal Wrap*                                                                         | object  | {}          |\n`;\n\nconst example = `\n  import Modal from '@jaw-dev/react-modal';\n\n  const App = () => {\n    const yourOptions = {...}\n    const buttonStyles = {\n      backgroundColor: 'blue'\n    }\n\n    return (\n      <div>\n        <Modal options={yourOptions} modalbuttonStyles={buttonStyles}>\n          <YourComponent/>\n        </Modal>\n      </div>\n    );\n  }\n`;\n\nconst cssExample = `\n  const newModalCloseStyles = {\n    top: '1rem',\n    right: '1rem',\n    padding: '1rem',\n    backgroundColor: 'black',\n    ':hover': {\n      cursor: 'grab'\n    }\n  };\n`;\n\nconst App = () => {\n  const buttonStyles = {\n    outline: 'none',\n    backgroundColor: 'rgb(230,230,230)',\n    border: '1px solid rgb(230,230,230)',\n    padding: '0.5rem',\n    borderRadius: '5px',\n    color: 'rgb(26,26,26)',\n    ':hover': {\n      cursor: 'pointer'\n    }\n  }\n\n  const options = {\n    label: 'Open Modal'\n  }\n\n  return (\n    <DMPWrap>\n      <DMPHeader>\n        <DMPLogo logo=\"@JAW-Dev React Modal\" />\n        <DMPGHLink link='https://github.com/JAW-Dev/jawdev-react-modal' />\n      </DMPHeader>\n      <DMPContent>\n        <DMPBlurb>\n          <p>A simple React modal component</p>\n        </DMPBlurb>\n        <DMPInstall name={pkg.name} />\n        <DMPExample code={example} />\n        <DMPBlurb>\n          <Modal options={options} modalbuttonStyles={buttonStyles}><ComponentContent /></Modal>\n        </DMPBlurb>\n        <DMPTable table={props} name={'Props'} />\n        <DMPTable table={optionsTable} name={'Options'} />\n        <DMPBlurb>\n          <p>* Style Components is used for generating the CSS to allow for the use of CSS pseudo selectors. To overwrite a component's CSS, create a object with the CSS you want to overwrite.</p>\n        </DMPBlurb>\n        <DMPExample code={cssExample} label=\"CSS Overwrite Example\" />\n      </DMPContent>\n      <DMPFooter />\n    </DMPWrap>\n  );\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}